{"version":3,"sources":["../../src/services/auth.service.ts"],"sourcesContent":["import { hash, compare } from 'bcrypt';\nimport { sign } from 'jsonwebtoken';\nimport { Service } from 'typedi';\nimport { SECRET_KEY } from '@config';\nimport { HttpException } from '@exceptions/httpException';\nimport { DataStoredInToken, TokenData } from '@interfaces/auth.interface';\nimport { User } from '@interfaces/users.interface';\nimport { UserModel } from '@models/users.model';\n\nconst createToken = (user: User): TokenData => {\n  const dataStoredInToken: DataStoredInToken = { id: user.id };\n  const expiresIn: number = 60 * 60;\n\n  return { expiresIn, token: sign(dataStoredInToken, SECRET_KEY, { expiresIn }) };\n};\n\nconst createCookie = (tokenData: TokenData): string => {\n  return `Authorization=${tokenData.token}; HttpOnly; Max-Age=${tokenData.expiresIn};`;\n};\n\n@Service()\nexport class AuthService {\n  public async signup(userData: User): Promise<User> {\n    const findUser: User = UserModel.find(user => user.email === userData.email);\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = { ...userData, id: UserModel.length + 1, password: hashedPassword };\n\n    return createUserData;\n  }\n\n  public async login(userData: User): Promise<{ cookie: string; findUser: User }> {\n    const findUser: User = UserModel.find(user => user.email === userData.email);\n    if (!findUser) throw new HttpException(409, `This email ${userData.email} was not found`);\n\n    const isPasswordMatching: boolean = await compare(userData.password, findUser.password);\n    if (!isPasswordMatching) throw new HttpException(409, \"You're password not matching\");\n\n    const tokenData = createToken(findUser);\n    const cookie = createCookie(tokenData);\n\n    return { cookie, findUser };\n  }\n\n  public async logout(userData: User): Promise<User> {\n    const findUser: User = UserModel.find(user => user.email === userData.email && user.password === userData.password);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n}\n"],"names":["AuthService","createToken","user","dataStoredInToken","id","expiresIn","token","sign","SECRET_KEY","createCookie","tokenData","signup","userData","findUser","UserModel","find","email","HttpException","hashedPassword","hash","password","createUserData","length","login","isPasswordMatching","compare","cookie","logout"],"mappings":";;;;+BAqBaA;;;eAAAA;;;wBArBiB;8BACT;wBACG;wBACG;+BACG;4BAGJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE1B,MAAMC,cAAc,CAACC;IACnB,MAAMC,oBAAuC;QAAEC,IAAIF,KAAKE,EAAE;IAAC;IAC3D,MAAMC,YAAoB,KAAK;IAE/B,OAAO;QAAEA;QAAWC,OAAOC,IAAAA,kBAAI,EAACJ,mBAAmBK,kBAAU,EAAE;YAAEH;QAAU;IAAG;AAChF;AAEA,MAAMI,eAAe,CAACC;IACpB,OAAO,CAAC,cAAc,EAAEA,UAAUJ,KAAK,CAAC,oBAAoB,EAAEI,UAAUL,SAAS,CAAC,CAAC,CAAC;AACtF;AAGO,IAAA,AAAML,cAAN,MAAMA;IACX,MAAaW,OAAOC,QAAc,EAAiB;QACjD,MAAMC,WAAiBC,qBAAS,CAACC,IAAI,CAACb,CAAAA,OAAQA,KAAKc,KAAK,KAAKJ,SAASI,KAAK;QAC3E,IAAIH,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEL,SAASI,KAAK,CAAC,eAAe,CAAC;QAExF,MAAME,iBAAiB,MAAMC,IAAAA,YAAI,EAACP,SAASQ,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,wCAAKT;YAAUR,IAAIU,qBAAS,CAACQ,MAAM,GAAG;YAAGF,UAAUF;;QAEhF,OAAOG;IACT;IAEA,MAAaE,MAAMX,QAAc,EAA+C;QAC9E,MAAMC,WAAiBC,qBAAS,CAACC,IAAI,CAACb,CAAAA,OAAQA,KAAKc,KAAK,KAAKJ,SAASI,KAAK;QAC3E,IAAI,CAACH,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEL,SAASI,KAAK,CAAC,cAAc,CAAC;QAExF,MAAMQ,qBAA8B,MAAMC,IAAAA,eAAO,EAACb,SAASQ,QAAQ,EAAEP,SAASO,QAAQ;QACtF,IAAI,CAACI,oBAAoB,MAAM,IAAIP,4BAAa,CAAC,KAAK;QAEtD,MAAMP,YAAYT,YAAYY;QAC9B,MAAMa,SAASjB,aAAaC;QAE5B,OAAO;YAAEgB;YAAQb;QAAS;IAC5B;IAEA,MAAac,OAAOf,QAAc,EAAiB;QACjD,MAAMC,WAAiBC,qBAAS,CAACC,IAAI,CAACb,CAAAA,OAAQA,KAAKc,KAAK,KAAKJ,SAASI,KAAK,IAAId,KAAKkB,QAAQ,KAAKR,SAASQ,QAAQ;QAClH,IAAI,CAACP,UAAU,MAAM,IAAII,4BAAa,CAAC,KAAK;QAE5C,OAAOJ;IACT;AACF"}